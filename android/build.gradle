/*
 * Copyright (C) 2017. Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import net.ltgt.gradle.errorprone.CheckSeverity

apply from: 'gradle/dependencies.gradle'

buildscript {
    apply from: rootProject.file('gradle/dependencies.gradle')
    repositories {
        google()
        mavenCentral()
        maven { url deps.build.gradlePluginsUrl }
        jcenter()
    }
    dependencies {
        classpath deps.build.gradlePlugins.android
        classpath deps.build.gradlePlugins.errorprone
    }
}

Set<String> androidLibraryProjects = [
        "rib-android",
        "rib-android-test",
        "rib-screen-stack-base",
        "rib-workflow",
        "rib-workflow-test-utils"
]
Set<String> useErrorProneProjects = [
        "memory-leaks",
        "tutorial1",
        "tutorial2",
        "autodispose-error-prone-checker"
]

subprojects {
    buildscript {
        repositories {
            google()
            jcenter()
            maven { url deps.build.gradlePluginsUrl }
        }
    }

    repositories {
        google()
        jcenter()
        maven { url deps.build.gradlePluginsUrl }
    }

    apply plugin: 'checkstyle'

    checkstyle { -> rootProject
        configFile rootProject.file('config/checkstyle/checkstyle.xml')
    }

    boolean isAndroidLibrary = project.name in androidLibraryProjects
    boolean isSample = project.path.startsWith(":demos:") || project.path.startsWith(":tutorials:")
    boolean usesErrorProne = project.name in useErrorProneProjects

    afterEvaluate {
        if ((isAndroidLibrary || isSample) && usesErrorProne) {
            def configurer = { variant ->
                variant.getJavaCompileProvider().configure {
                    options.errorprone.nullaway {
                        severity = CheckSeverity.ERROR
                        annotatedPackages.add("com.uber")
                    }
                    options.errorprone.excludedPaths = ".*/build/generated/.*"
                }
            }
            if (isAndroidLibrary) {
                project.android.libraryVariants.configureEach(configurer)
            }
            if (isSample) {
                project.android.applicationVariants.configureEach(configurer)
            }
            project.android.testVariants.configureEach(configurer)
            project.android.unitTestVariants.configureEach(configurer)
        }
        if (isAndroidLibrary || isSample) {
            // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
            project.android {
                if (isAndroidLibrary) {
                    libraryVariants.all {
                        it.generateBuildConfigProvider.configure {
                            it.enabled = false
                        }
                    }
                    variantFilter { variant ->
                        if (variant.buildType.name == 'debug') {
                            variant.setIgnore(true)
                        }
                    }
                }
                if (isSample) {
                    buildTypes {
                        debug {
                            matchingFallbacks = ['release']
                        }
                    }
                    variantFilter { variant ->
                        if (variant.buildType.name == "release") {
                            variant.setIgnore(true)
                        }
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply from: 'gradle/dependencies.gradle'
